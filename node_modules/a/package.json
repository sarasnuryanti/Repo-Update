{
  "name": "a",
  "version": "0.2.4",
  "main": "index.js",
  "title": "a",
  "description": "Mocking framework and test framework in compact when-style. With recursive test runner",
  "keywords": [
    "mock",
    "mocking",
    "partial mock",
    "strict mock",
    "tdd",
    "bdd",
    "test runner",
    "stub",
    "stubbing",
    "mock require",
    "verify"
  ],
  "dependencies": {
    "a_mock": "0.0.1",
    "a_test": "0.0.2"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:alfateam/a.git"
  },
  "bin": {
    "when": "./node_modules/a_test/bin/rt.js"
  },
  "contributors": [
    {
      "name": "Lars-Erik Roald",
      "email": "lars.roald@gmail.com"
    },
    {
      "name": "Adlan Elm.",
      "email": "adlan.elm@gmail.com"
    }
  ],
  "readme": "_a_\n===\n_Mocking framework_ + _testing framework_. \n\n\nThe mocking framework can be used in any JavaScript testing framework.\n\nThe testing framework has a short and concise bdd syntax - with reusable contexts.\n\n__how to install__\n\n```\nnpm install a\n```\n\n\n\n__if you want the test framework, install it globally too__\n\n```\nnpm install a -g\n```\n\n\n\n_Mocking_\n===================\n\nMocking a function \n------------------\n\n__partial mock__\n\n```\nvar original = function() {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock(original);\noriginal = mock;\nmock.expect().return('fake');\n\noriginal(); //returns 'fake'\noriginal(); //returns 'realValue'\n```\n\n\n\n__strict mock__\n\n```\nvar original = function() {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect().return('fake');\n\noriginal(); //returns 'fake'\noriginal(); //throws unexpected arguments\n```\n\n\n\n__strict mock with arguments__\n\n```\nvar original = function(arg) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('testValue1').return('fake1');\nmock.expect('testValue2').return('fake2');\n\noriginal('testValue1'); //returns 'fake1'\noriginal('testValue2'); //returns 'fake2'\noriginal(); //throws unexpected arguments\noriginal('foo'); //throws unexpected arguments\n```\n\n\n\n__strict mock with multiple arguments__\n\n```\nvar original = function(arg1, arg2) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('firstArg1', 'secondArg1').return('fake1');\nmock.expect('firstArg2', 'secondArg2').return('fake2');\n\n\noriginal('firstArg1', 'secondArg1'); //returns 'fake1'\noriginal('firstArg2', 'secondArg2'); //returns 'fake2'\noriginal('foo'); //throws unexpected arguments\noriginal('foo', 'bar'); //throws unexpected arguments\n```\n\n__strict mock expecting array__\n\n```\nvar original = function(array) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expectArray(['a','b']).return('fake1');\nmock.expectArray(['a','b').return('fake2');\nmock.expectArray(['c','d').return('fake3');\n\noriginal(['a','b']); //returns 'fake1'\noriginal(['a','b']); //returns 'fake2'\noriginal(['c','d']); //returns 'fake3'\noriginal(['a','b']); //throws unexpected arguments\noriginal(['foo', 'bar']); //throws unexpected arguments\n```\n\n\n__strict mock with repeats__\n\n```\nvar original = function() {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect().return('fake').repeat(2);\n\noriginal(); //returns 'fake'\noriginal(); //returns 'fake'\noriginal(); //throws unexpected arguments\n```\n\n__strict mock with infinite repeats__\n\n```\nvar original = function() {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect().return('fake').repeatAny();\n\noriginal(); //returns 'fake'\noriginal(); //returns 'fake'\noriginal(); //returns 'fake'...\n```\n\n\n__strict mock ignoring arguments__\n\n```\nvar original = function(arg) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expectAnything().return('fake1');\n\noriginal('someRandomValue'); //returns 'fake1'\noriginal(); //throws unexpected arguments\n```\n\n\n\n__strict mock with interceptor__\n\n```\nvar original = function(arg) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('testValue').whenCalled(onCalled).return('fake1');\n\nfunction onCalled(arg) {\n\t//arg == 'testValue'\n}\n\noriginal('testValue'); //returns 'fake1'\noriginal(); //throws unexpected arguments\n```\n\n__strict mock - verify (fail)__\n\n```\nvar original = function(arg) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('testValue1').return('fake1');\nmock.expect('testValue2').return('fake2');\n\noriginal('testValue1'); //returns 'fake1'\nmock.verify(); //throws mock has 1 pending functions\n```\n\n__strict mock - verify (success)__\n\n```\nvar original = function(arg) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('testValue1').return('fake1');\nmock.expect('testValue2').return('fake2');\n\noriginal('testValue1'); //returns 'fake1'\noriginal('testValue2'); //returns 'fake2'\nmock.verify(); //returns true\n```\n\n\n__strict mock - advanced scenario__\n\n```\nvar original = function(arg, callback) {\n\treturn 'realValue';\n}\n\nvar mock = require('a').mock();\noriginal = mock;\nmock.expect('testValue').expectAnything().whenCalled(onCalled).return('fake1');\n\nfunction onCalled(arg,callback) {\n\t//arg == 'testValue'\n\t//callback == foo\n}\n\nfunction foo() {\t\n}\n\n\noriginal('testValue', foo); //returns 'fake1'\nmock.verify() //returns true\noriginal('testValue',foo); //throws unexpected arguments\n```\n\nMocking require \n----------------\n\n__expectRequire__\n\n```\nvar fakeDep = {};\n\nvar expectRequire = require('a').expectRequire;\nexpectRequire('./realDep').return(fakeDep);\n\nrequire('./realDep'); //returns fakeDep\nrequire('./realDep'); //returns realDep (behaves like a partial mock)\n```\n\n__requireMock (compact syntax)__\n\n```\nvar requireMock = require('a').requireMock;\nvar fakeDep = requireMock('./realDep'); //returns a strict mock\n\nrequire('./realDep'); //returns fakeDep\nrequire('./realDep'); //returns realDep\n```\n\n__..is equivalent to ..__\n\n```\nvar mock = require('a').mock();\nvar expectRequire = require('a').expectRequire;\n\nvar fakeDep = mock; \nexpectRequire('./realDep').return(fakeDep);\n\nrequire('./realDep'); //returns fakeDep\nrequire('./realDep'); //returns realDep\n```\n\nMocking an object\n-----------------\n__partial object mock__\n\n```\nfunction newCustomer(_name) {\n\tvar c = {};\n\t\n\tc.getName = function () \n\t{\n\t\treturn _name;\n\t};\n\n\treturn c;\n}\n\nvar customer = newCustomer('Alfonzo The Real');\nvar customerMock = mock(customer);\n\ncustomerMock.getName.expect().return('Johnny Fake');\n\ncustomer.getName(); //returns Johnny Fake\ncustomer.getName(); //returns Alfonzo The Real\ncustomerMock.verify(); //returns true\n```\n\n\n_A test framework_\n===================\n_A_ test framework is a simplistic, magic-free library providing unit-testing facilities with a compact, bdd-style syntax. \n\nIn contrast to other bdd-style test frameworks, however, it doesn't allow nesting suites in each other in order to test the SUT(subject under test) in different states. Instead, the framework relies on folder structure to describe the state which the SUT currently is. Suite names are generated based on their filenames. As a result there will be many small test files instead of few big ones with test suites nested in each other.\n\nTest setup -- the \"Arrange-Act\" part of suites, is separated from the \"Assert\" part. This way the same setup can be used across different suites. Test setups can, of course, be chained.\n\n\nExamples below can be found here: https://github.com/alfateam/a_demo\n\nExample\n---------\nThe test runner ( _when_ ) will search for all files named when*.js in current directory and below.\n\nGiven the following file structure\n\n- demo/\t\n\t- counter.js\n\t- counter_specs/\n\t\t- new/\n\t\t\t- increment.js\n\t\t\t- when_incremented.js\n\t\t- new.js\n\t\t- when_new.js\n\t\n__counter.js__\n\n```\nmodule.exports = function () {\n\tvar counter = {\n\t\tvalue: 0,\n\t\tincrement: function() { value++; }\n\t};\n\t\n\treturn counter;\n}\n```\n\n__counter_specs/new.js__\n\n```\nfunction act(c) {\n\tvar createCounter = require('../counter');\n\tc.sut = createCounter();\n}\nmodule.exports = act;\n```\n\n__counter_specs/when_new.js__\n\n```\nvar c = {}; //test context object\nvar when = require('a').when;\n\nwhen('./new', c). //set up\n\tit('should be an object').\n\t\tassertEqual('object', typeof c.sut)\n\tit('should have value equal to zero').\n\t\tassertEqual(0, c.sut.value).\n\tit('should fail just for fun').\n\t\tassertFail('error message');\n\n```\n\n__counter_specs/new/increment.js__\n\n```\nfunction act(c) {\n\tc.sut.increment();\n}\nact.base = '../new';\nmodule.exports = act;\n```\n\n__counter_specs/new/when_incremented.js__\n\n```\nvar c = {};\nvar when = require('a').when;\n\nwhen('./increment', c).\n\tit('should have value equal to 1').\n\t\tassertEqual(1, c.sut.value);\n\n```\n\nIn demo directory run _when_\n\t\n\tuser@localhost:~/a_demo $ when\n\n\t » counter_specs » new\n\t\n\t  ✓ should be an object\n\t  ✓ should have value equal to zero\n\t  ✘ should fail just for fun\n\t\n\t » counter_specs » new » increment\n\t\n\t  ✓ should have value equal to 1\n\t\n\t========== Summary =============\n\n\tcounter_specs » new\n\t  ✘ should fail just for fun\n\t\n\tAssertionError: error message\n    \tat retval.assertFail (/home/user/a_demo/node_modules/a/when/it.js:14:11)\n    \tat Object.test (/home/user/a_demo/node_modules/a/when/test_invoker.js:5:3)\n    \tat Object.retval.assertFail (/home/user/a_demo/node_modules/a/when/it.js:13:5)\n    \tat Object.<anonymous> (/home/user/a_demo/counter_specs/when_new.js:11:3)\n    \tat Module._compile (module.js:449:26)\n    \tat Object.Module._extensions..js (module.js:467:10)\n    \tat Module.load (module.js:356:32)\n    \tat Function.Module._load (module.js:312:12)\n    \tat Module.require (module.js:362:17)\n    \tat require (module.js:378:17)\n\t------------\n\n\tsuites: 2, passed: 3, failed: 1\n\n",
  "readmeFilename": "README.md",
  "_id": "a@0.2.4",
  "dist": {
    "shasum": "32343aaa9f4d0fe354f551c5e99791117ee8ac2f"
  },
  "_from": "a"
}
